
AVR Shift Register.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000376  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00000376  0000040a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800076  00800076  00000420  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000028d  00000000  00000000  000004a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000193  00000000  00000000  00000735  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001ff  00000000  00000000  000008c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f8  00000000  00000000  00000ac8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000246  00000000  00000000  00000bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000195  00000000  00000000  00000e06  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00000f9b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	26 c0       	rjmp	.+76     	; 0x50 <__bad_interrupt>
   4:	25 c0       	rjmp	.+74     	; 0x50 <__bad_interrupt>
   6:	24 c0       	rjmp	.+72     	; 0x50 <__bad_interrupt>
   8:	23 c0       	rjmp	.+70     	; 0x50 <__bad_interrupt>
   a:	3f c1       	rjmp	.+638    	; 0x28a <__vector_5>
   c:	21 c0       	rjmp	.+66     	; 0x50 <__bad_interrupt>
   e:	20 c0       	rjmp	.+64     	; 0x50 <__bad_interrupt>
  10:	60 c0       	rjmp	.+192    	; 0xd2 <__vector_8>
  12:	1e c0       	rjmp	.+60     	; 0x50 <__bad_interrupt>
  14:	1d c0       	rjmp	.+58     	; 0x50 <__bad_interrupt>
  16:	1c c0       	rjmp	.+56     	; 0x50 <__bad_interrupt>
  18:	1b c0       	rjmp	.+54     	; 0x50 <__bad_interrupt>
  1a:	1a c0       	rjmp	.+52     	; 0x50 <__bad_interrupt>
  1c:	19 c0       	rjmp	.+50     	; 0x50 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf ed       	ldi	r28, 0xDF	; 223
  24:	cd bf       	out	0x3d, r28	; 61

00000026 <__do_copy_data>:
  26:	10 e0       	ldi	r17, 0x00	; 0
  28:	a0 e6       	ldi	r26, 0x60	; 96
  2a:	b0 e0       	ldi	r27, 0x00	; 0
  2c:	e6 e7       	ldi	r30, 0x76	; 118
  2e:	f3 e0       	ldi	r31, 0x03	; 3
  30:	02 c0       	rjmp	.+4      	; 0x36 <__do_copy_data+0x10>
  32:	05 90       	lpm	r0, Z+
  34:	0d 92       	st	X+, r0
  36:	a6 37       	cpi	r26, 0x76	; 118
  38:	b1 07       	cpc	r27, r17
  3a:	d9 f7       	brne	.-10     	; 0x32 <__do_copy_data+0xc>

0000003c <__do_clear_bss>:
  3c:	20 e0       	ldi	r18, 0x00	; 0
  3e:	a6 e7       	ldi	r26, 0x76	; 118
  40:	b0 e0       	ldi	r27, 0x00	; 0
  42:	01 c0       	rjmp	.+2      	; 0x46 <.do_clear_bss_start>

00000044 <.do_clear_bss_loop>:
  44:	1d 92       	st	X+, r1

00000046 <.do_clear_bss_start>:
  46:	aa 37       	cpi	r26, 0x7A	; 122
  48:	b2 07       	cpc	r27, r18
  4a:	e1 f7       	brne	.-8      	; 0x44 <.do_clear_bss_loop>
  4c:	24 d0       	rcall	.+72     	; 0x96 <main>
  4e:	91 c1       	rjmp	.+802    	; 0x372 <_exit>

00000050 <__bad_interrupt>:
  50:	d7 cf       	rjmp	.-82     	; 0x0 <__vectors>

00000052 <initialise_74HC595>:
#define HC595DataHigh() (shift_register_PORT |=  (1<<DS_pin)) //just some basic macros
#define HC595DataLow()  (shift_register_PORT &= ~(1<<DS_pin))

void initialise_74HC595()
{
   shift_register_DDR|=((1<<SHCP_pin)|(1<<STCP_pin)|(1<<DS_pin));	//sets all the pins to output
  52:	87 b3       	in	r24, 0x17	; 23
  54:	86 61       	ori	r24, 0x16	; 22
  56:	87 bb       	out	0x17, r24	; 23
  58:	08 95       	ret

0000005a <pulse_shift_clock>:
}


void pulse_shift_clock()	//sends a serial pulse to the shift clock
{
   shift_register_PORT |=  (1<<SHCP_pin);
  5a:	c2 9a       	sbi	0x18, 2	; 24

   shift_register_PORT &= ~(1<<SHCP_pin);
  5c:	c2 98       	cbi	0x18, 2	; 24
  5e:	08 95       	ret

00000060 <write_74HC595>:

}

void write_74HC595(uint8_t data)
{
  60:	cf 93       	push	r28
  62:	df 93       	push	r29
  64:	d8 2f       	mov	r29, r24
    PORTB &= ~(1<<STCP_pin);	//set the "latch" low
  66:	c4 98       	cbi	0x18, 4	; 24
  68:	c8 e0       	ldi	r28, 0x08	; 8
    
    for(uint8_t i=0; i<8; i++)	//send the data serially
    {
        if(data & 0b10000000)   //Mask out the MSB bit of the data
  6a:	dd 23       	and	r29, r29
  6c:	14 f4       	brge	.+4      	; 0x72 <write_74HC595+0x12>
		//if(data & 0b00000001)
        {
            HC595DataHigh();    //if the bit is high, set the data pin high
  6e:	c1 9a       	sbi	0x18, 1	; 24
  70:	01 c0       	rjmp	.+2      	; 0x74 <write_74HC595+0x14>
        }
      
        else
        {
            HC595DataLow();     //if bit is low, set the data pin low
  72:	c1 98       	cbi	0x18, 1	; 24
        }

        pulse_shift_clock();	//send a serial pulse
  74:	f2 df       	rcall	.-28     	; 0x5a <pulse_shift_clock>
        data = data<<1;			//shift the data and do it again
  76:	dd 0f       	add	r29, r29
  78:	c1 50       	subi	r28, 0x01	; 1

void write_74HC595(uint8_t data)
{
    PORTB &= ~(1<<STCP_pin);	//set the "latch" low
    
    for(uint8_t i=0; i<8; i++)	//send the data serially
  7a:	b9 f7       	brne	.-18     	; 0x6a <write_74HC595+0xa>
        data = data<<1;			//shift the data and do it again
		//data = data>>1;

   }

   PORTB |= (1<<STCP_pin);		//set the latch high to display the results
  7c:	c4 9a       	sbi	0x18, 4	; 24
}
  7e:	df 91       	pop	r29
  80:	cf 91       	pop	r28
  82:	08 95       	ret

00000084 <initialise_ADC>:
 *		40.960		lightness changes don't obviously (or maybe is 33.792 equal to @165mv)
 *		 0.799		voltage at maximum lightness
 */
void initialise_ADC(void)
{
	ADCSRA |= 1<<ADEN | 1<<ADIE | 1<<ADPS0 | 1<<ADPS2;
  84:	86 b1       	in	r24, 0x06	; 6
  86:	8d 68       	ori	r24, 0x8D	; 141
  88:	86 b9       	out	0x06, r24	; 6
	ADMUX  |= 1<<MUX1 | 1<<MUX0;						// PB3 as ADC pin
  8a:	87 b1       	in	r24, 0x07	; 7
  8c:	83 60       	ori	r24, 0x03	; 3
  8e:	87 b9       	out	0x07, r24	; 7
  90:	08 95       	ret

00000092 <start_conversion>:
}

void start_conversion(void)
{
	ADCSRA |= 1<<ADSC;
  92:	36 9a       	sbi	0x06, 6	; 6
  94:	08 95       	ret

00000096 <main>:
}


int main(void)
{
	sei();
  96:	78 94       	sei
	initialise_74HC595();
  98:	dc df       	rcall	.-72     	; 0x52 <initialise_74HC595>
	initialise_ADC();
  9a:	f4 df       	rcall	.-24     	; 0x84 <initialise_ADC>
	start_conversion();
  9c:	fa df       	rcall	.-12     	; 0x92 <start_conversion>
	
	DDRB |= (1<<PB0);									// PWM control pin, as output
  9e:	b8 9a       	sbi	0x17, 0	; 23
	TCCR0A |= (1<<COM0A1) | (1<<WGM00) | (1<<WGM01);	// fast PWM mode + small settings
  a0:	8a b5       	in	r24, 0x2a	; 42
  a2:	83 68       	ori	r24, 0x83	; 131
  a4:	8a bd       	out	0x2a, r24	; 42
	
	TIMSK |= (1<<TOIE0);								// Here some differences.
  a6:	89 b7       	in	r24, 0x39	; 57
  a8:	82 60       	ori	r24, 0x02	; 2
  aa:	89 bf       	out	0x39, r24	; 57
	
	OCR0A = 125;										// should later be comment out to let interrupt handle this problem.
  ac:	8d e7       	ldi	r24, 0x7D	; 125
  ae:	89 bd       	out	0x29, r24	; 41
	//OCR0A = 191;//75/100*255;
	
	TCCR0B |= (1<<CS00);								// no prescaler
  b0:	83 b7       	in	r24, 0x33	; 51
  b2:	81 60       	ori	r24, 0x01	; 1
  b4:	83 bf       	out	0x33, r24	; 51
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	87 ea       	ldi	r24, 0xA7	; 167
  b8:	91 e6       	ldi	r25, 0x61	; 97
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <main+0x24>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x2a>
  c0:	00 00       	nop
	while(1)
	{
		
		_delay_ms(100);
		
		dutyCycle += 5;
  c2:	80 91 74 00 	lds	r24, 0x0074
  c6:	8b 5f       	subi	r24, 0xFB	; 251
  c8:	80 93 74 00 	sts	0x0074, r24
		if(dutyCycle > 255)
  cc:	80 91 74 00 	lds	r24, 0x0074
  d0:	f2 cf       	rjmp	.-28     	; 0xb6 <main+0x20>

000000d2 <__vector_8>:
}



ISR(ADC_vect)
{
  d2:	1f 92       	push	r1
  d4:	0f 92       	push	r0
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	0f 92       	push	r0
  da:	11 24       	eor	r1, r1
  dc:	2f 93       	push	r18
  de:	3f 93       	push	r19
  e0:	4f 93       	push	r20
  e2:	5f 93       	push	r21
  e4:	6f 93       	push	r22
  e6:	7f 93       	push	r23
  e8:	8f 93       	push	r24
  ea:	9f 93       	push	r25
  ec:	af 93       	push	r26
  ee:	bf 93       	push	r27
  f0:	ef 93       	push	r30
  f2:	ff 93       	push	r31
	voltage_reading = ADC;
  f4:	84 b1       	in	r24, 0x04	; 4
  f6:	95 b1       	in	r25, 0x05	; 5
  f8:	90 93 77 00 	sts	0x0077, r25
  fc:	80 93 76 00 	sts	0x0076, r24
	// voltage_reading 0 ~ 1023.
	//firstdigit = ((voltage_reading * 5000L / 1023)+500) / 1000; //12V through voltage divider have a max. voltage 3.69V. equal to 755.71
	// target: 
	//		readingValue > 48		-	Display : 0
	//		readingValue 48 - 0		-	Display : 0 - 9
	if (voltage_reading > 48)
 100:	80 91 76 00 	lds	r24, 0x0076
 104:	90 91 77 00 	lds	r25, 0x0077
 108:	c1 97       	sbiw	r24, 0x31	; 49
 10a:	18 f0       	brcs	.+6      	; 0x112 <__stack+0x33>
	{
		firstdigit = 0;//voltage_reading; 
 10c:	10 92 79 00 	sts	0x0079, r1
 110:	a3 c0       	rjmp	.+326    	; 0x258 <__stack+0x179>
		//write_74HC595(LED_patterns[firstdigit]);
	}	
	else if(voltage_reading < 4.8) 
 112:	60 91 76 00 	lds	r22, 0x0076
 116:	70 91 77 00 	lds	r23, 0x0077
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	c8 d0       	rcall	.+400    	; 0x2b0 <__floatunsisf>
 120:	2a e9       	ldi	r18, 0x9A	; 154
 122:	39 e9       	ldi	r19, 0x99	; 153
 124:	49 e9       	ldi	r20, 0x99	; 153
 126:	50 e4       	ldi	r21, 0x40	; 64
 128:	bf d0       	rcall	.+382    	; 0x2a8 <__cmpsf2>
 12a:	88 23       	and	r24, r24
 12c:	24 f4       	brge	.+8      	; 0x136 <__stack+0x57>
	{
		firstdigit = 18; // This is a special '8' with dot, to show the max. performance of LEDs
 12e:	82 e1       	ldi	r24, 0x12	; 18
 130:	80 93 79 00 	sts	0x0079, r24
 134:	91 c0       	rjmp	.+290    	; 0x258 <__stack+0x179>
		//write_74HC595(LED_patterns[firstdigit]);
	}
	else if(voltage_reading < 9.6) 
 136:	60 91 76 00 	lds	r22, 0x0076
 13a:	70 91 77 00 	lds	r23, 0x0077
 13e:	80 e0       	ldi	r24, 0x00	; 0
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	b6 d0       	rcall	.+364    	; 0x2b0 <__floatunsisf>
 144:	2a e9       	ldi	r18, 0x9A	; 154
 146:	39 e9       	ldi	r19, 0x99	; 153
 148:	49 e1       	ldi	r20, 0x19	; 25
 14a:	51 e4       	ldi	r21, 0x41	; 65
 14c:	ad d0       	rcall	.+346    	; 0x2a8 <__cmpsf2>
 14e:	88 23       	and	r24, r24
 150:	24 f4       	brge	.+8      	; 0x15a <__stack+0x7b>
		firstdigit = 9;
 152:	89 e0       	ldi	r24, 0x09	; 9
 154:	80 93 79 00 	sts	0x0079, r24
 158:	7f c0       	rjmp	.+254    	; 0x258 <__stack+0x179>
	else if(voltage_reading < 14.4)
 15a:	60 91 76 00 	lds	r22, 0x0076
 15e:	70 91 77 00 	lds	r23, 0x0077
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	a4 d0       	rcall	.+328    	; 0x2b0 <__floatunsisf>
 168:	26 e6       	ldi	r18, 0x66	; 102
 16a:	36 e6       	ldi	r19, 0x66	; 102
 16c:	46 e6       	ldi	r20, 0x66	; 102
 16e:	51 e4       	ldi	r21, 0x41	; 65
 170:	9b d0       	rcall	.+310    	; 0x2a8 <__cmpsf2>
 172:	88 23       	and	r24, r24
 174:	24 f4       	brge	.+8      	; 0x17e <__stack+0x9f>
		firstdigit = 8;
 176:	88 e0       	ldi	r24, 0x08	; 8
 178:	80 93 79 00 	sts	0x0079, r24
 17c:	6d c0       	rjmp	.+218    	; 0x258 <__stack+0x179>
	else if(voltage_reading < 19.2)
 17e:	60 91 76 00 	lds	r22, 0x0076
 182:	70 91 77 00 	lds	r23, 0x0077
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	92 d0       	rcall	.+292    	; 0x2b0 <__floatunsisf>
 18c:	2a e9       	ldi	r18, 0x9A	; 154
 18e:	39 e9       	ldi	r19, 0x99	; 153
 190:	49 e9       	ldi	r20, 0x99	; 153
 192:	51 e4       	ldi	r21, 0x41	; 65
 194:	89 d0       	rcall	.+274    	; 0x2a8 <__cmpsf2>
 196:	88 23       	and	r24, r24
 198:	24 f4       	brge	.+8      	; 0x1a2 <__stack+0xc3>
		firstdigit = 7;
 19a:	87 e0       	ldi	r24, 0x07	; 7
 19c:	80 93 79 00 	sts	0x0079, r24
 1a0:	5b c0       	rjmp	.+182    	; 0x258 <__stack+0x179>
	else if(voltage_reading < 24)
 1a2:	80 91 76 00 	lds	r24, 0x0076
 1a6:	90 91 77 00 	lds	r25, 0x0077
 1aa:	48 97       	sbiw	r24, 0x18	; 24
 1ac:	20 f4       	brcc	.+8      	; 0x1b6 <__stack+0xd7>
		firstdigit = 6;
 1ae:	86 e0       	ldi	r24, 0x06	; 6
 1b0:	80 93 79 00 	sts	0x0079, r24
 1b4:	51 c0       	rjmp	.+162    	; 0x258 <__stack+0x179>
	else if(voltage_reading < 28.8)
 1b6:	60 91 76 00 	lds	r22, 0x0076
 1ba:	70 91 77 00 	lds	r23, 0x0077
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	76 d0       	rcall	.+236    	; 0x2b0 <__floatunsisf>
 1c4:	26 e6       	ldi	r18, 0x66	; 102
 1c6:	36 e6       	ldi	r19, 0x66	; 102
 1c8:	46 ee       	ldi	r20, 0xE6	; 230
 1ca:	51 e4       	ldi	r21, 0x41	; 65
 1cc:	6d d0       	rcall	.+218    	; 0x2a8 <__cmpsf2>
 1ce:	88 23       	and	r24, r24
 1d0:	24 f4       	brge	.+8      	; 0x1da <__stack+0xfb>
		firstdigit = 5;
 1d2:	85 e0       	ldi	r24, 0x05	; 5
 1d4:	80 93 79 00 	sts	0x0079, r24
 1d8:	3f c0       	rjmp	.+126    	; 0x258 <__stack+0x179>
	else if(voltage_reading < 33.6)
 1da:	60 91 76 00 	lds	r22, 0x0076
 1de:	70 91 77 00 	lds	r23, 0x0077
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	64 d0       	rcall	.+200    	; 0x2b0 <__floatunsisf>
 1e8:	26 e6       	ldi	r18, 0x66	; 102
 1ea:	36 e6       	ldi	r19, 0x66	; 102
 1ec:	46 e0       	ldi	r20, 0x06	; 6
 1ee:	52 e4       	ldi	r21, 0x42	; 66
 1f0:	5b d0       	rcall	.+182    	; 0x2a8 <__cmpsf2>
 1f2:	88 23       	and	r24, r24
 1f4:	24 f4       	brge	.+8      	; 0x1fe <__stack+0x11f>
		firstdigit = 4;
 1f6:	84 e0       	ldi	r24, 0x04	; 4
 1f8:	80 93 79 00 	sts	0x0079, r24
 1fc:	2d c0       	rjmp	.+90     	; 0x258 <__stack+0x179>
	else if(voltage_reading < 38.4)
 1fe:	60 91 76 00 	lds	r22, 0x0076
 202:	70 91 77 00 	lds	r23, 0x0077
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	52 d0       	rcall	.+164    	; 0x2b0 <__floatunsisf>
 20c:	2a e9       	ldi	r18, 0x9A	; 154
 20e:	39 e9       	ldi	r19, 0x99	; 153
 210:	49 e1       	ldi	r20, 0x19	; 25
 212:	52 e4       	ldi	r21, 0x42	; 66
 214:	49 d0       	rcall	.+146    	; 0x2a8 <__cmpsf2>
 216:	88 23       	and	r24, r24
 218:	24 f4       	brge	.+8      	; 0x222 <__stack+0x143>
		firstdigit = 3;
 21a:	83 e0       	ldi	r24, 0x03	; 3
 21c:	80 93 79 00 	sts	0x0079, r24
 220:	1b c0       	rjmp	.+54     	; 0x258 <__stack+0x179>
	else if(voltage_reading < 43.2)
 222:	60 91 76 00 	lds	r22, 0x0076
 226:	70 91 77 00 	lds	r23, 0x0077
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	40 d0       	rcall	.+128    	; 0x2b0 <__floatunsisf>
 230:	2d ec       	ldi	r18, 0xCD	; 205
 232:	3c ec       	ldi	r19, 0xCC	; 204
 234:	4c e2       	ldi	r20, 0x2C	; 44
 236:	52 e4       	ldi	r21, 0x42	; 66
 238:	37 d0       	rcall	.+110    	; 0x2a8 <__cmpsf2>
 23a:	88 23       	and	r24, r24
 23c:	24 f4       	brge	.+8      	; 0x246 <__stack+0x167>
		firstdigit = 2;
 23e:	82 e0       	ldi	r24, 0x02	; 2
 240:	80 93 79 00 	sts	0x0079, r24
 244:	09 c0       	rjmp	.+18     	; 0x258 <__stack+0x179>
	else if(voltage_reading <= 48)
 246:	80 91 76 00 	lds	r24, 0x0076
 24a:	90 91 77 00 	lds	r25, 0x0077
 24e:	c1 97       	sbiw	r24, 0x31	; 49
 250:	18 f4       	brcc	.+6      	; 0x258 <__stack+0x179>
		firstdigit = 1;
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	80 93 79 00 	sts	0x0079, r24
		
	write_74HC595(LED_patterns[firstdigit]);
 258:	e0 91 79 00 	lds	r30, 0x0079
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	e0 5a       	subi	r30, 0xA0	; 160
 260:	ff 4f       	sbci	r31, 0xFF	; 255
 262:	80 81       	ld	r24, Z
 264:	fd de       	rcall	.-518    	; 0x60 <write_74HC595>
	
		//firstdigit = (int) map(voltage_reading, 48,0, 0, 9);
	
	//write_74HC595(LED_patterns[firstdigit]);
	// TODO :   Add a variable to send back to main loop, in order to drive FAN with the Speed it should using.
	ADCSRA |= 1<<ADSC;
 266:	36 9a       	sbi	0x06, 6	; 6
}
 268:	ff 91       	pop	r31
 26a:	ef 91       	pop	r30
 26c:	bf 91       	pop	r27
 26e:	af 91       	pop	r26
 270:	9f 91       	pop	r25
 272:	8f 91       	pop	r24
 274:	7f 91       	pop	r23
 276:	6f 91       	pop	r22
 278:	5f 91       	pop	r21
 27a:	4f 91       	pop	r20
 27c:	3f 91       	pop	r19
 27e:	2f 91       	pop	r18
 280:	0f 90       	pop	r0
 282:	0f be       	out	0x3f, r0	; 63
 284:	0f 90       	pop	r0
 286:	1f 90       	pop	r1
 288:	18 95       	reti

0000028a <__vector_5>:

ISR(TIMER0_OVF_vect)
{
 28a:	1f 92       	push	r1
 28c:	0f 92       	push	r0
 28e:	0f b6       	in	r0, 0x3f	; 63
 290:	0f 92       	push	r0
 292:	11 24       	eor	r1, r1
 294:	8f 93       	push	r24
	OCR0A = dutyCycle;
 296:	80 91 74 00 	lds	r24, 0x0074
 29a:	89 bd       	out	0x29, r24	; 41
 29c:	8f 91       	pop	r24
 29e:	0f 90       	pop	r0
 2a0:	0f be       	out	0x3f, r0	; 63
 2a2:	0f 90       	pop	r0
 2a4:	1f 90       	pop	r1
 2a6:	18 95       	reti

000002a8 <__cmpsf2>:
 2a8:	40 d0       	rcall	.+128    	; 0x32a <__fp_cmp>
 2aa:	08 f4       	brcc	.+2      	; 0x2ae <__cmpsf2+0x6>
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	08 95       	ret

000002b0 <__floatunsisf>:
 2b0:	e8 94       	clt
 2b2:	09 c0       	rjmp	.+18     	; 0x2c6 <__floatsisf+0x12>

000002b4 <__floatsisf>:
 2b4:	97 fb       	bst	r25, 7
 2b6:	3e f4       	brtc	.+14     	; 0x2c6 <__floatsisf+0x12>
 2b8:	90 95       	com	r25
 2ba:	80 95       	com	r24
 2bc:	70 95       	com	r23
 2be:	61 95       	neg	r22
 2c0:	7f 4f       	sbci	r23, 0xFF	; 255
 2c2:	8f 4f       	sbci	r24, 0xFF	; 255
 2c4:	9f 4f       	sbci	r25, 0xFF	; 255
 2c6:	99 23       	and	r25, r25
 2c8:	a9 f0       	breq	.+42     	; 0x2f4 <__floatsisf+0x40>
 2ca:	f9 2f       	mov	r31, r25
 2cc:	96 e9       	ldi	r25, 0x96	; 150
 2ce:	bb 27       	eor	r27, r27
 2d0:	93 95       	inc	r25
 2d2:	f6 95       	lsr	r31
 2d4:	87 95       	ror	r24
 2d6:	77 95       	ror	r23
 2d8:	67 95       	ror	r22
 2da:	b7 95       	ror	r27
 2dc:	f1 11       	cpse	r31, r1
 2de:	f8 cf       	rjmp	.-16     	; 0x2d0 <__floatsisf+0x1c>
 2e0:	fa f4       	brpl	.+62     	; 0x320 <__floatsisf+0x6c>
 2e2:	bb 0f       	add	r27, r27
 2e4:	11 f4       	brne	.+4      	; 0x2ea <__floatsisf+0x36>
 2e6:	60 ff       	sbrs	r22, 0
 2e8:	1b c0       	rjmp	.+54     	; 0x320 <__floatsisf+0x6c>
 2ea:	6f 5f       	subi	r22, 0xFF	; 255
 2ec:	7f 4f       	sbci	r23, 0xFF	; 255
 2ee:	8f 4f       	sbci	r24, 0xFF	; 255
 2f0:	9f 4f       	sbci	r25, 0xFF	; 255
 2f2:	16 c0       	rjmp	.+44     	; 0x320 <__floatsisf+0x6c>
 2f4:	88 23       	and	r24, r24
 2f6:	11 f0       	breq	.+4      	; 0x2fc <__floatsisf+0x48>
 2f8:	96 e9       	ldi	r25, 0x96	; 150
 2fa:	11 c0       	rjmp	.+34     	; 0x31e <__floatsisf+0x6a>
 2fc:	77 23       	and	r23, r23
 2fe:	21 f0       	breq	.+8      	; 0x308 <__floatsisf+0x54>
 300:	9e e8       	ldi	r25, 0x8E	; 142
 302:	87 2f       	mov	r24, r23
 304:	76 2f       	mov	r23, r22
 306:	05 c0       	rjmp	.+10     	; 0x312 <__floatsisf+0x5e>
 308:	66 23       	and	r22, r22
 30a:	71 f0       	breq	.+28     	; 0x328 <__floatsisf+0x74>
 30c:	96 e8       	ldi	r25, 0x86	; 134
 30e:	86 2f       	mov	r24, r22
 310:	70 e0       	ldi	r23, 0x00	; 0
 312:	60 e0       	ldi	r22, 0x00	; 0
 314:	2a f0       	brmi	.+10     	; 0x320 <__floatsisf+0x6c>
 316:	9a 95       	dec	r25
 318:	66 0f       	add	r22, r22
 31a:	77 1f       	adc	r23, r23
 31c:	88 1f       	adc	r24, r24
 31e:	da f7       	brpl	.-10     	; 0x316 <__floatsisf+0x62>
 320:	88 0f       	add	r24, r24
 322:	96 95       	lsr	r25
 324:	87 95       	ror	r24
 326:	97 f9       	bld	r25, 7
 328:	08 95       	ret

0000032a <__fp_cmp>:
 32a:	99 0f       	add	r25, r25
 32c:	00 08       	sbc	r0, r0
 32e:	55 0f       	add	r21, r21
 330:	aa 0b       	sbc	r26, r26
 332:	e0 e8       	ldi	r30, 0x80	; 128
 334:	fe ef       	ldi	r31, 0xFE	; 254
 336:	16 16       	cp	r1, r22
 338:	17 06       	cpc	r1, r23
 33a:	e8 07       	cpc	r30, r24
 33c:	f9 07       	cpc	r31, r25
 33e:	c0 f0       	brcs	.+48     	; 0x370 <__fp_cmp+0x46>
 340:	12 16       	cp	r1, r18
 342:	13 06       	cpc	r1, r19
 344:	e4 07       	cpc	r30, r20
 346:	f5 07       	cpc	r31, r21
 348:	98 f0       	brcs	.+38     	; 0x370 <__fp_cmp+0x46>
 34a:	62 1b       	sub	r22, r18
 34c:	73 0b       	sbc	r23, r19
 34e:	84 0b       	sbc	r24, r20
 350:	95 0b       	sbc	r25, r21
 352:	39 f4       	brne	.+14     	; 0x362 <__fp_cmp+0x38>
 354:	0a 26       	eor	r0, r26
 356:	61 f0       	breq	.+24     	; 0x370 <__fp_cmp+0x46>
 358:	23 2b       	or	r18, r19
 35a:	24 2b       	or	r18, r20
 35c:	25 2b       	or	r18, r21
 35e:	21 f4       	brne	.+8      	; 0x368 <__fp_cmp+0x3e>
 360:	08 95       	ret
 362:	0a 26       	eor	r0, r26
 364:	09 f4       	brne	.+2      	; 0x368 <__fp_cmp+0x3e>
 366:	a1 40       	sbci	r26, 0x01	; 1
 368:	a6 95       	lsr	r26
 36a:	8f ef       	ldi	r24, 0xFF	; 255
 36c:	81 1d       	adc	r24, r1
 36e:	81 1d       	adc	r24, r1
 370:	08 95       	ret

00000372 <_exit>:
 372:	f8 94       	cli

00000374 <__stop_program>:
 374:	ff cf       	rjmp	.-2      	; 0x374 <__stop_program>
